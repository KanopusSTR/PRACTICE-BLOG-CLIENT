Отчёт о принятых архитектурных решениях.

Сервер.


Для начала я создал 3 папки: cmd, internal и pkg. В cmd будут лежать испольняемые файлы (main.go). internal и cmd, как я понял, создаются в golang чтобы разделять файлы, содержимое которых, соответственно, нельзя и можно использовать при импортировании этого проекта в другие.
Также был создан файл с переменными окружения (.env), в котором хранится скрытая информация (jwt_secret) и информация конфигурации (http_port). Этот файл не добавлен в git репозиторий, так как должен быть определен для каждого сервера отдельно.

В internal я создал папки api, app, config, entities, models, repo, service. 
    api     :   В ней принимаются и отправляются все запросы, все взаимодейсвтие с также находится в нем.
    app     :   В ней инициализируются все объекты, которые нужны для запуска приложения, и создаётся, собственно, функция для запуска.
    config  :   В ней лежат функции для чтения конфигурационных файлов (.env) и получения из них переменных.
    entities:   В ней находятся структуры, которые лежат в репозитории.
    models  :   В ней находятся структуры, которые мы получаем, отправляем. Также те, в которых добавлены некоторые поля для методов, в которые они передаются.
    repo    :   В ней описана работа базы данных, в которой хранятся нужные в проекте данные (пользователи, посты, комментарии)
    service :   В ней описана работа бизнес-логики приложения.

в pkg я создал папку myErrors, в которой находятся ошибки, с нужными мне сообщениями; а также функции, которые не используют другие функции проекта.

Далее я более подробно расскажу про элементы internal.

api.
Здесь находится server.go файл, где находится интерфейс сервера, а также 1 из его реализаций (httpServer). В методе Run описана логика обработки получаемых http запросов. Для предусмотренных запросов представлен свой обработчик. Обработчики находятся в handlers.

app.
Отвечает за связывание слоёв, настройку зависимостей и запуск приложения

config.
Читает jwt ключ и номер порта из .env файла

entities.
Лежат структуры User, Post, Comment.

models.
Лежат реквесты, респонсы и модифицированные структуры (с нужной дополнительной информацией) для сервиса обработчика.

repo.
Находится интерфейс и реализация баз данных. Всего 3 базы (Comment, Post, User)

service.
Здесь находятся 3 сервиса. Users, где представлена основная логика приложения (работа с постами, комментариями, пользователями, а также регистрация и логин). Token, где находятся методы для работы с jwt токеном. Handler, где находится логика обработки получаемых запросов



Клиент.


Также как и в сервере создаем 3 папки: cmd, internal, pkg и файл с переменными окружения .env.
В cmd также лежит запускаемый файл (main.go).

В internal: api, app, config, console, converter, entities, models, service

api: Аналогично серверу, только добавляется 1 интерфейс для считывания строки и ее обработки
console: Реализует интрефейс взаимодействия с консолью
converter: Функции для представления сообщений и постов в строковой форме
app, config, entities, models: Аналогично сереру
service: Представлена бизнес-логика приложения (работы с каналами чтения и записи, используя методы из console)

________________________________________

По итогу у нас получается:
    server/client, api, config, app, реализация repo/console и прочие взаимодействия с "внешним миром" (такое как использование фреймворков) - это внешний слой (4)
    service.handlers, интерфейсы repo/console, models - это интерфейсные адаптеры (3 слой)
    service.token и service.users, converter (в клиенте) - это Use Cases слой (2)
    entities - это Entity слой (1)
    

